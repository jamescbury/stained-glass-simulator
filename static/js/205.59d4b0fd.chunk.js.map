{"version":3,"file":"static/js/205.59d4b0fd.chunk.js","mappings":"wKAGA,MAsCaA,EAA2BC,eAqDRC,QAAQC,IApDpB,CAChB,CACEC,SAAU,YACVC,KAAM,QACNC,SAAU,SACVC,WAAY,eACZC,YAAa,oCAEf,CACEJ,SAAU,YACVC,KAAM,QACNC,SAAU,YACVC,WAAY,WACZC,YAAa,kDAEf,CACEJ,SAAU,gBACVC,KAAM,YACNC,SAAU,YACVC,WAAY,eACZC,YAAa,+BAEf,CACEJ,SAAU,eACVC,KAAM,WACNC,SAAU,YACVC,WAAY,WACZC,YAAa,2CAEf,CACEJ,SAAU,oBACVC,KAAM,iBACNC,SAAU,WACVC,WAAY,eACZC,YAAa,uCAEf,CACEJ,SAAU,gBACVC,KAAM,YACNC,SAAU,SACVC,WAAY,WACZC,YAAa,6CAEf,CACEJ,SAAU,cACVC,KAAM,UACNC,SAAU,YACVC,WAAY,eACZC,YAAa,gDAKLC,IAAIR,UACZ,MAAMS,OA7FWT,WACrB,IAEE,MAAMU,EAAQ,CACZ,8CAA8CP,IAC9C,sBAAsBA,IACtB,8CAA+CA,IAC/C,uBAAuBA,KAGzB,IAAK,MAAMQ,KAAQD,EACjB,IACEE,QAAQC,IAAI,wBAAwBF,KACpC,MAAMG,QAAiBC,MAAMJ,GAC7B,GAAIG,EAASE,GAAI,CACf,MAAMC,QAAgBH,EAASI,OAE/B,GAAID,EAAQE,SAAS,UAAYF,EAAQE,SAAS,mBAEhD,OADAP,QAAQC,IAAI,uBAAuBV,UAAiBQ,KAC7CM,CAEX,CACF,CAAE,MAAOG,GACP,CAIJ,MAAM,IAAIC,MAAM,kBAAkBlB,kBACpC,CAAE,MAAOmB,GAGP,OAFAV,QAAQU,MAAM,iBAAiBnB,KAAamB,GAErC,+OAIT,GA0D6BC,CAAeC,EAASrB,UAK3CsB,GAFS,IAAIC,WACAC,gBAAgBlB,EAAY,iBAC5BmB,iBAAiB,kDAEpC,MAAO,IACFJ,EACHf,aACAoB,WAAYJ,EAAOK,OACnBC,WAAW,EACXC,YAAY,IAAIC,MAAOC,cACvBC,SAAU,IAAIC,KAAK,CAAC3B,IAAa4B,KACjCC,KAAM,c","sources":["data/defaultTemplates.js"],"sourcesContent":["// Import default template SVG files as raw text\n// These files are stored in public/template_patterns/\n\nconst loadSVGContent = async (fileName) => {\n  try {\n    // Try different paths to find the correct one\n    const paths = [\n      `/stained-glass-simulator/template_patterns/${fileName}`,\n      `/template_patterns/${fileName}`,\n      `${process.env.PUBLIC_URL}/template_patterns/${fileName}`,\n      `./template_patterns/${fileName}`\n    ];\n    \n    for (const path of paths) {\n      try {\n        console.log(`Trying to load from: ${path}`);\n        const response = await fetch(path);\n        if (response.ok) {\n          const content = await response.text();\n          // Verify it's SVG content\n          if (content.includes('<svg') && !content.includes('<!DOCTYPE html>')) {\n            console.log(`Successfully loaded ${fileName} from ${path}`);\n            return content;\n          }\n        }\n      } catch (e) {\n        // Continue to next path\n      }\n    }\n    \n    throw new Error(`Failed to load ${fileName} from any path`);\n  } catch (error) {\n    console.error(`Error loading ${fileName}:`, error);\n    // Return a simple placeholder SVG if loading fails\n    return `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n      <rect x=\"10\" y=\"10\" width=\"80\" height=\"80\" fill=\"#f0f0f0\" stroke=\"#ccc\"/>\n      <text x=\"50\" y=\"50\" text-anchor=\"middle\" fill=\"#999\">Failed to load</text>\n    </svg>`;\n  }\n};\n\nexport const loadDefaultTemplatesData = async () => {\n  const templates = [\n    {\n      fileName: 'daisy.svg',\n      name: 'Daisy',\n      category: 'Floral',\n      difficulty: 'intermediate',\n      description: 'A beautiful daisy flower pattern'\n    },\n    {\n      fileName: 'fence.svg',\n      name: 'Fence',\n      category: 'Geometric',\n      difficulty: 'beginner',\n      description: 'Simple fence pattern with rectangular sections'\n    },\n    {\n      fileName: 'honeycomb.svg',\n      name: 'Honeycomb',\n      category: 'Geometric',\n      difficulty: 'intermediate',\n      description: 'Hexagonal honeycomb pattern'\n    },\n    {\n      fileName: 'mountain.svg',\n      name: 'Mountain',\n      category: 'Landscape',\n      difficulty: 'advanced',\n      description: 'Mountain landscape with multiple layers'\n    },\n    {\n      fileName: 'squigle_fence.svg',\n      name: 'Squiggle Fence',\n      category: 'Abstract',\n      difficulty: 'intermediate',\n      description: 'Decorative fence with wavy patterns'\n    },\n    {\n      fileName: 'sunflower.svg',\n      name: 'Sunflower',\n      category: 'Floral',\n      difficulty: 'advanced',\n      description: 'Detailed sunflower with petals and center'\n    },\n    {\n      fileName: 'sunrise.svg',\n      name: 'Sunrise',\n      category: 'Landscape',\n      difficulty: 'intermediate',\n      description: 'Sunrise scene with radiating light patterns'\n    }\n  ];\n\n  const loadedTemplates = await Promise.all(\n    templates.map(async (template) => {\n      const svgContent = await loadSVGContent(template.fileName);\n      \n      // Parse SVG to count pieces\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(svgContent, 'image/svg+xml');\n      const shapes = doc.querySelectorAll('path, polygon, rect, circle, ellipse, polyline');\n      \n      return {\n        ...template,\n        svgContent,\n        pieceCount: shapes.length,\n        isDefault: true,\n        uploadDate: new Date().toISOString(),\n        fileSize: new Blob([svgContent]).size,\n        type: 'template'\n      };\n    })\n  );\n\n  return loadedTemplates;\n};"],"names":["loadDefaultTemplatesData","async","Promise","all","fileName","name","category","difficulty","description","map","svgContent","paths","path","console","log","response","fetch","ok","content","text","includes","e","Error","error","loadSVGContent","template","shapes","DOMParser","parseFromString","querySelectorAll","pieceCount","length","isDefault","uploadDate","Date","toISOString","fileSize","Blob","size","type"],"sourceRoot":""}